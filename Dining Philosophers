#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
pthread_mutex_t mutex[NUM_PHILOSOPHERS];

void* philosopher(void* num) {
    int i = *(int*)num;
    while(1) {
        pthread_mutex_lock(&mutex[i]);
        pthread_mutex_lock(&mutex[(i + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d is eating.\n", i);
        sleep(1);
        pthread_mutex_unlock(&mutex[i]);
        pthread_mutex_unlock(&mutex[(i + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d is thinking.\n", i);
        sleep(1);
    }
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_numbers[NUM_PHILOSOPHERS];
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&mutex[i], NULL);
        philosopher_numbers[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &philosopher_numbers[i]);
    }
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) pthread_join(threads[i], NULL);
    return 0;
}
