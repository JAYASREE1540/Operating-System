#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    key_t key = ftok("progfile", 65);   // Generate unique key
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT); // Create shared memory segment
    char *str = (char*) shmat(shmid, NULL, 0); // Attach shared memory to process

    if (fork() == 0) { // Child process (Consumer)
        sleep(2);  // Wait for parent to write
        printf("Consumer received: %s\n", str);  // Read shared memory
        shmdt(str); // Detach shared memory
    } else { // Parent process (Producer)
        strcpy(str, "Hello from producer!");  // Write to shared memory
        printf("Producer wrote: %s\n", str);
        wait(NULL);  // Wait for child process to finish
        shmctl(shmid, IPC_RMID, NULL);  // Remove shared memory segment
    }

    return 0;
}
